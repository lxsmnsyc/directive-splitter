// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ForOfStatement > client > should skip server for-of statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  for (const item of items) {
    'use server';
    doStuff();
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,KAAK,MAAMC,IAAI,IAAIC,KAAK,EAAE;IACxB,YAAY;IACZC,OAAO,CAAC,CAAC;EACX;AACF,CAAC",
    "names": [
      "example",
      "item",
      "items",
      "doStuff",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        for (const item of items) {
          'use server';
          doStuff();
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ForOfStatement > client > should skip top-level values for scope 1`] = `
{
  "code": "import { value } from "./example.ts?directive=0.ts";
for (const item of items) {
  const _block = (await import("./example.ts?directive=2.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export const value = 'foo bar';",
    "/path/to/example.ts?directive=1.ts" => "export default (async function () {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=2.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": ";AAEM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      for (const item of items) {
        'use server';
        await doStuff(value);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=1.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform break statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 0) {
    break;
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA;EAAA,WAAAA,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          break;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform continue statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 1) {
    continue;
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA;EAAA,WAAAA,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          continue;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform labeled break statements 1`] = `
{
  "code": "foo: for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 0) {
    if (_result === "foo") {
      break foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACMA,GAAG,EAAE,KAAK,MAAMC,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,IAAAC,OAAA;MAAA,MAAAN,GAAA;IAAA;EAAA,WAAAK,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "foo",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      foo: for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          break foo;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform labeled continue statements 1`] = `
{
  "code": "foo: for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 1) {
    if (_result === "foo") {
      continue foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACMA,GAAG,EAAE,KAAK,MAAMC,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,IAAAC,OAAA;MAAA,SAAAN,GAAA;IAAA;EAAA,WAAAK,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "foo",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      foo: for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          continue foo;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform valid server for-of statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    await doStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        await doStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > client > should transform valid server functions with scope 1`] = `
{
  "code": "async function foo() {
  const value = 'foo bar';
  for (const item of items) {
    const _block = (await import("./example.ts?directive=1.ts")).default;
    const [_type, _result, _mutations] = await _block(value);
    if (_type === 4) {
      throw _result;
    }
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function (value) {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-foo");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB,KAAK,MAAMC,IAAI,IAAIC,KAAK;IAAA,MAAAC,MAAA,iDAAAC,OAAA;IAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA,CADlBH,KAAK;IAAA,IAAAK,KAAA;MAAA,MAAAC,OAAA;IAAA;EAAA;AAKb",
    "names": [
      "foo",
      "value",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        for (const item of items) {
          'use server';
          await doStuff(value);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should skip server for-of statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  for (const item of items) {
    'use server';
    doStuff();
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,KAAK,MAAMC,IAAI,IAAIC,KAAK,EAAE;IACxB,YAAY;IACZC,OAAO,CAAC,CAAC;EACX;AACF,CAAC",
    "names": [
      "example",
      "item",
      "items",
      "doStuff",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        for (const item of items) {
          'use server';
          doStuff();
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ForOfStatement > server > should skip top-level values for scope 1`] = `
{
  "code": "import { value } from "./example.ts?directive=0.ts";
for (const item of items) {
  const _block = (await import("./example.ts?directive=2.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export const value = 'foo bar';",
    "/path/to/example.ts?directive=1.ts" => "import { value } from "./example.ts?directive=0.ts";
export default (async function () {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=2.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=1.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": ";AAEM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      for (const item of items) {
        'use server';
        await doStuff(value);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=1.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform break statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 0) {
    break;
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA;EAAA,WAAAA,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          break;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform continue statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 1) {
    continue;
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA;EAAA,WAAAA,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          continue;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform labeled break statements 1`] = `
{
  "code": "foo: for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 0) {
    if (_result === "foo") {
      break foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACMA,GAAG,EAAE,KAAK,MAAMC,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,IAAAC,OAAA;MAAA,MAAAN,GAAA;IAAA;EAAA,WAAAK,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "foo",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      foo: for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          break foo;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform labeled continue statements 1`] = `
{
  "code": "foo: for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 1) {
    if (_result === "foo") {
      continue foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACMA,GAAG,EAAE,KAAK,MAAMC,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,IAAAC,OAAA;MAAA,SAAAN,GAAA;IAAA;EAAA,WAAAK,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "foo",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      foo: for (const item of items) {
        'use server';
        if (cond()) {
          await doStuff(value);
        } else {
          continue foo;
        }
        await doMoreStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform valid server for-of statements 1`] = `
{
  "code": "for (const item of items) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    await doStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,KAAK,MAAMA,IAAI,IAAIC,KAAK;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      for (const item of items) {
        'use server';
        await doStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`ForOfStatement > server > should transform valid server functions with scope 1`] = `
{
  "code": "async function foo() {
  const value = 'foo bar';
  for (const item of items) {
    const _block = (await import("./example.ts?directive=1.ts")).default;
    const [_type, _result, _mutations] = await _block(value);
    if (_type === 4) {
      throw _result;
    }
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function (value) {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-foo", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB,KAAK,MAAMC,IAAI,IAAIC,KAAK;IAAA,MAAAC,MAAA,iDAAAC,OAAA;IAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA,CADlBH,KAAK;IAAA,IAAAK,KAAA;MAAA,MAAAC,OAAA;IAAA;EAAA;AAKb",
    "names": [
      "foo",
      "value",
      "item",
      "items",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        for (const item of items) {
          'use server';
          await doStuff(value);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;
