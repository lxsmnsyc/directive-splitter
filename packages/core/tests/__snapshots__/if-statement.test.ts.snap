// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`IfStatement > client > should skip server if statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  if (cond()) {
    'use server';
    doStuff();
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,IAAIC,IAAI,CAAC,CAAC,EAAE;IACV,YAAY;IACZC,OAAO,CAAC,CAAC;EACX;AACF,CAAC",
    "names": [
      "example",
      "cond",
      "doStuff",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        if (cond()) {
          'use server';
          doStuff();
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`IfStatement > client > should skip top-level values for scope 1`] = `
{
  "code": "import { value } from "./example.ts?directive=0.ts";
if (cond()) {
  const _block = (await import("./example.ts?directive=2.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export const value = 'foo bar';",
    "/path/to/example.ts?directive=1.ts" => "export default (async function () {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=2.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": ";AAEM,IAAIA,IAAI,CAAC,CAAC;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      if (cond()) {
        'use server';
        await doStuff(value);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=1.ts",
  ],
}
`;

exports[`IfStatement > client > should transform valid server functions with scope 1`] = `
{
  "code": "async function foo() {
  const value = 'foo bar';
  if (cond()) {
    const _block = (await import("./example.ts?directive=1.ts")).default;
    const [_type, _result, _mutations] = await _block(value);
    if (_type === 4) {
      throw _result;
    }
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function (value) {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-foo");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB,IAAIC,IAAI,CAAC,CAAC;IAAA,MAAAC,MAAA,iDAAAC,OAAA;IAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA,CADJF,KAAK;IAAA,IAAAI,KAAA;MAAA,MAAAC,OAAA;IAAA;EAAA;AAKb",
    "names": [
      "foo",
      "value",
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        if (cond()) {
          'use server';
          await doStuff(value);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`IfStatement > client > should transform valid server if statements 1`] = `
{
  "code": "if (cond()) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    await doStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-client";
export default _entry("26ecc3a5-0-anonymous");",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,IAAIA,IAAI,CAAC,CAAC;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      if (cond()) {
        'use server';
        await doStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`IfStatement > server > should skip server if statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  if (cond()) {
    'use server';
    doStuff();
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,IAAIC,IAAI,CAAC,CAAC,EAAE;IACV,YAAY;IACZC,OAAO,CAAC,CAAC;EACX;AACF,CAAC",
    "names": [
      "example",
      "cond",
      "doStuff",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        if (cond()) {
          'use server';
          doStuff();
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`IfStatement > server > should skip top-level values for scope 1`] = `
{
  "code": "import { value } from "./example.ts?directive=0.ts";
if (cond()) {
  const _block = (await import("./example.ts?directive=2.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export const value = 'foo bar';",
    "/path/to/example.ts?directive=1.ts" => "import { value } from "./example.ts?directive=0.ts";
export default (async function () {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=2.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=1.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": ";AAEM,IAAIA,IAAI,CAAC,CAAC;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      if (cond()) {
        'use server';
        await doStuff(value);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=1.ts",
  ],
}
`;

exports[`IfStatement > server > should transform valid server functions with scope 1`] = `
{
  "code": "async function foo() {
  const value = 'foo bar';
  if (cond()) {
    const _block = (await import("./example.ts?directive=1.ts")).default;
    const [_type, _result, _mutations] = await _block(value);
    if (_type === 4) {
      throw _result;
    }
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function (value) {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-foo", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB,IAAIC,IAAI,CAAC,CAAC;IAAA,MAAAC,MAAA,iDAAAC,OAAA;IAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA,CADJF,KAAK;IAAA,IAAAI,KAAA;MAAA,MAAAC,OAAA;IAAA;EAAA;AAKb",
    "names": [
      "foo",
      "value",
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        if (cond()) {
          'use server';
          await doStuff(value);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;

exports[`IfStatement > server > should transform valid server if statements 1`] = `
{
  "code": "if (cond()) {
  const _block = (await import("./example.ts?directive=1.ts")).default;
  const [_type, _result, _mutations] = await _block();
  if (_type === 4) {
    throw _result;
  }
}",
  "entries": [
    "/path/to/example.ts?directive=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?directive=0.ts" => "export default (async function () {
  try {
    await doStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});",
    "/path/to/example.ts?directive=1.ts" => "import { server as _entry } from "directive-splitter/example-server";
import _root from "./example.ts?directive=0.ts";
export default _entry("26ecc3a5-0-anonymous", _root);",
  },
  "map": {
    "file": undefined,
    "mappings": "AACM,IAAIA,IAAI,CAAC,CAAC;EAAA,MAAAC,MAAA,iDAAAC,OAAA;EAAA,OAAAC,KAAA,EAAAC,OAAA,EAAAC,UAAA,UAAAJ,MAAA;EAAA,IAAAE,KAAA;IAAA,MAAAC,OAAA;EAAA;AAAA",
    "names": [
      "cond",
      "_block",
      "default",
      "_type",
      "_result",
      "_mutations",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      if (cond()) {
        'use server';
        await doStuff();
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?directive=0.ts",
  ],
}
`;
