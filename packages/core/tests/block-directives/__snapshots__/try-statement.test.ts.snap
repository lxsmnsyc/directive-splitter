// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TryStatement > client > should skip server try statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  try {
    'use server';
    doStuff();
  } catch (err) {
    report(err);
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,IAAI;IACF,YAAY;IACZC,OAAO,CAAC,CAAC;EACX,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,MAAM,CAACD,GAAG,CAAC;EACb;AACF,CAAC",
    "names": [
      "example",
      "doStuff",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        try {
          'use server';
          doStuff();
        } catch (err) {
          report(err);
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`TryStatement > client > should skip top-level values for scope 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
import { value } from "./example.ts?mode=client&my-example=0.ts";
try {
  const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=client&my-example=1.ts")).default, null)();
} catch (err) {
  report(err);
}",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "export const value = 'foo bar';",
      "map": {
        "file": undefined,
        "mappings": "aACYA,KAAK,GAAG,SAAS",
        "names": [
          "value",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=client&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-anonymous");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AAEM;EAAA,OAAAA,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA;AAAA,EAGE,OAAOC,GAAG,EAAE;EACZC,MAAM,CAACD,GAAG,CAAC;AACb",
    "names": [
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      try {
        'use server';
        await doStuff(value);
      } catch (err) {
        report(err);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`TryStatement > client > should transform valid server functions with scope 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
async function foo() {
  const value = 'foo bar';
  try {
    const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=client&my-example=0.ts")).default, null)(value);
  } catch (err) {
    report(err);
  }
}",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=0.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-foo");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB;IAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA,QADMJ,KAAK;EAAA,EAIT,OAAOK,GAAG,EAAE;IACZC,MAAM,CAACD,GAAG,CAAC;EACb;AACF",
    "names": [
      "foo",
      "value",
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        try {
          'use server';
          await doStuff(value);
        } catch (err) {
          report(err);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`TryStatement > client > should transform valid server try statements 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
try {
  const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=client&my-example=0.ts")).default, null)();
} catch (err) {
  report(err);
}",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=0.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-anonymous");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";AACM;EAAA,OAAAA,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA;AAAA,EAGE,OAAOC,GAAG,EAAE;EACZC,MAAM,CAACD,GAAG,CAAC;AACb",
    "names": [
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      try {
        'use server';
        await doStuff();
      } catch (err) {
        report(err);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`TryStatement > server > should skip server try statements in non-async functions 1`] = `
{
  "code": "const example = () => {
  try {
    'use server';
    doStuff();
  } catch (err) {
    report(err);
  }
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,IAAI;IACF,YAAY;IACZC,OAAO,CAAC,CAAC;EACX,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,MAAM,CAACD,GAAG,CAAC;EACb;AACF,CAAC",
    "names": [
      "example",
      "doStuff",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        try {
          'use server';
          doStuff();
        } catch (err) {
          report(err);
        }
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`TryStatement > server > should skip top-level values for scope 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
import { value } from "./example.ts?mode=server&my-example=0.ts";
try {
  const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=server&my-example=2.ts")).default, null)();
} catch (err) {
  report(err);
}",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export const value = 'foo bar';",
      "map": {
        "file": undefined,
        "mappings": "aACYA,KAAK,GAAG,SAAS",
        "names": [
          "value",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { value } from "./example.ts?mode=server&my-example=0.ts";
export default (async function () {
  try {
    await doStuff(value);
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": ";;;IAIQ,MAAMA,OAAO,CAACC,KAAK,CAAC;EAAC,SAAAC,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AAAA",
        "names": [
          "doStuff",
          "value",
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=2.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=1.ts";
export default entry_1("26ecc3a5-0-anonymous", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AAEM;EAAA,OAAAA,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA;AAAA,EAGE,OAAOC,GAAG,EAAE;EACZC,MAAM,CAACD,GAAG,CAAC;AACb",
    "names": [
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      try {
        'use server';
        await doStuff(value);
      } catch (err) {
        report(err);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
}
`;

exports[`TryStatement > server > should transform valid server functions with scope 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
async function foo() {
  const value = 'foo bar';
  try {
    const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=server&my-example=1.ts")).default, null)(value);
  } catch (err) {
    report(err);
  }
}",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export default (async function (value) {
  try {
    await doStuff(value);
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": "gCAEcA,KAAK;EAAA;IAGT,MAAMC,OAAO,CAACD,KAAK,CAAC;EAAC,SAAAE,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AAAA",
        "names": [
          "value",
          "doStuff",
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=0.ts";
export default entry_1("26ecc3a5-0-foo", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";AACM,eAAeA,GAAGA,CAAA,EAAG;EACnB,MAAMC,KAAK,GAAG,SAAS;EACvB;IAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA,QADMJ,KAAK;EAAA,EAIT,OAAOK,GAAG,EAAE;IACZC,MAAM,CAACD,GAAG,CAAC;EACb;AACF",
    "names": [
      "foo",
      "value",
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      async function foo() {
        const value = 'foo bar';
        try {
          'use server';
          await doStuff(value);
        } catch (err) {
          report(err);
        }
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=0.ts",
  ],
}
`;

exports[`TryStatement > server > should transform valid server try statements 1`] = `
{
  "code": "import { $$func as $$func_1 } from "my-example/runtime";
try {
  const [type_1, result_1] = await $$func_1((await import("./example.ts?mode=server&my-example=1.ts")).default, null)();
} catch (err) {
  report(err);
}",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export default (async function () {
  try {
    await doStuff();
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": ";;IAGQ,MAAMA,OAAO,CAAC,CAAC;EAAC,SAAAC,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AAAA",
        "names": [
          "doStuff",
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=0.ts";
export default entry_1("26ecc3a5-0-anonymous", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";AACM;EAAA,OAAAA,MAAA,EAAAC,QAAA,UAAAC,QAAA,4DAAAC,OAAA;AAAA,EAGE,OAAOC,GAAG,EAAE;EACZC,MAAM,CAACD,GAAG,CAAC;AACb",
    "names": [
      "type_1",
      "result_1",
      "$$func_1",
      "default",
      "err",
      "report",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      try {
        'use server';
        await doStuff();
      } catch (err) {
        report(err);
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=0.ts",
  ],
}
`;
