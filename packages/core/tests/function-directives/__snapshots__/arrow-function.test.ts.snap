// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ArrowFunctionExpression > client > should skip non-async server functions 1`] = `
{
  "code": "const example = () => {
  'use server';

  return 'foo bar';
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,YAAY;;EACZ,OAAO,SAAS;AAClB,CAAC",
    "names": [
      "example",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        'use server';
        return 'foo bar';
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ArrowFunctionExpression > client > should skip top-level values for scope 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
import { value } from "./example.ts?mode=client&my-example=0.ts";
const outer = () => {
  const example = $$server_1(async () => {
    const source_1 = (await import("./example.ts?mode=client&my-example=1.ts")).default;
    return async (...rest_1) => {
      const [type_1, result_1] = await $$func_1(source_1, null)([], ...rest_1);
      return result_1;
    };
  });
};",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "export const value = 'foo bar';",
      "map": {
        "file": undefined,
        "mappings": "aACYA,KAAK,GAAG,SAAS",
        "names": [
          "value",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=client&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-example");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;;AAEM,MAAMA,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,OAAO,GAAAC,UAAA;IAAA,MAAAC,QAAA,8DAAAC,OAAA;IAAA,iBAAAC,MAAA;MAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,eAAAE,MAAA;MAAA,OAAAE,QAAA;IAAA;EAAA,EAGZ;AACH,CAAC",
    "names": [
      "outer",
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      const outer = () => {
        const example = async () => {
          'use server';
          return value;
        };
      }
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ArrowFunctionExpression > client > should transform valid server functions 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
const example = $$server_1(async () => {
  const source_1 = (await import("./example.ts?mode=client&my-example=0.ts")).default;
  return async (...rest_1) => {
    const [type_1, result_1] = await $$func_1(source_1, null)([], ...rest_1);
    return result_1;
  };
});",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=0.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-example");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AACM,MAAMA,OAAO,GAAAC,UAAA;EAAA,MAAAC,QAAA,8DAAAC,OAAA;EAAA,iBAAAC,MAAA;IAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,eAAAE,MAAA;IAAA,OAAAE,QAAA;EAAA;AAAA,EAGZ",
    "names": [
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = async () => {
        'use server';
        return 'foo bar';
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ArrowFunctionExpression > client > should transform valid server functions with scope 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
const outer = () => {
  const value = 'foo bar';
  const example = $$server_1(async () => {
    const source_1 = (await import("./example.ts?mode=client&my-example=0.ts")).default;
    return async (...rest_1) => {
      const [type_1, result_1] = await $$func_1(source_1, null)([value], ...rest_1);
      return result_1;
    };
  });
};",
  "entries": [
    "/path/to/example.ts?mode=client&my-example=0.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=client&my-example=0.ts" => {
      "code": "import { server as entry_1 } from "my-example/client";
export default entry_1("26ecc3a5-0-example");",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AACM,MAAMA,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,KAAK,GAAG,SAAS;EACvB,MAAMC,OAAO,GAAAC,UAAA;IAAA,MAAAC,QAAA,8DAAAC,OAAA;IAAA,iBAAAC,MAAA;MAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,SADPH,KAAK,MAAAK,MAAA;MAAA,OAAAE,QAAA;IAAA;EAAA,EAIV;AACH,CAAC",
    "names": [
      "outer",
      "value",
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const outer = () => {
        const value = 'foo bar';
        const example = async () => {
          'use server';
          return value;
        };
      }
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ArrowFunctionExpression > server > should skip non-async server functions 1`] = `
{
  "code": "const example = () => {
  'use server';

  return 'foo bar';
};",
  "entries": [],
  "files": Map {},
  "map": {
    "file": undefined,
    "mappings": "AACM,MAAMA,OAAO,GAAGA,CAAA,KAAM;EACpB,YAAY;;EACZ,OAAO,SAAS;AAClB,CAAC",
    "names": [
      "example",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = () => {
        'use server';
        return 'foo bar';
      };
      ",
    ],
    "version": 3,
  },
  "roots": [],
}
`;

exports[`ArrowFunctionExpression > server > should skip top-level values for scope 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
import { value } from "./example.ts?mode=server&my-example=0.ts";
const outer = () => {
  const example = $$server_1(async () => {
    const source_1 = (await import("./example.ts?mode=server&my-example=2.ts")).default;
    return async (...rest_1) => {
      const [type_1, result_1] = await $$func_1(source_1, null)([], ...rest_1);
      return result_1;
    };
  });
};",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=2.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export const value = 'foo bar';",
      "map": {
        "file": undefined,
        "mappings": "aACYA,KAAK,GAAG,SAAS",
        "names": [
          "value",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { value } from "./example.ts?mode=server&my-example=0.ts";
export default (async ([]) => {
  try {
    return [2, value];
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": ";8BAGoC;EAAA;IAAA,WAEnBA,KAAK;EAAA,SAAAC,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AACd,CAAC",
        "names": [
          "value",
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=2.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=1.ts";
export default entry_1("26ecc3a5-0-example", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;;AAEM,MAAMA,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,OAAO,GAAAC,UAAA;IAAA,MAAAC,QAAA,8DAAAC,OAAA;IAAA,iBAAAC,MAAA;MAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,eAAAE,MAAA;MAAA,OAAAE,QAAA;IAAA;EAAA,EAGZ;AACH,CAAC",
    "names": [
      "outer",
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const value = 'foo bar';
      const outer = () => {
        const example = async () => {
          'use server';
          return value;
        };
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
}
`;

exports[`ArrowFunctionExpression > server > should transform valid server functions 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
const example = $$server_1(async () => {
  const source_1 = (await import("./example.ts?mode=server&my-example=1.ts")).default;
  return async (...rest_1) => {
    const [type_1, result_1] = await $$func_1(source_1, null)([], ...rest_1);
    return result_1;
  };
});",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export default (async ([]) => {
  try {
    return [2, 'foo bar'];
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": "8BACkC;EAAA;IAAA,WAEnB,SAAS;EAAA,SAAAA,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AAClB,CAAC",
        "names": [
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=0.ts";
export default entry_1("26ecc3a5-0-example", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AACM,MAAMA,OAAO,GAAAC,UAAA;EAAA,MAAAC,QAAA,8DAAAC,OAAA;EAAA,iBAAAC,MAAA;IAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,eAAAE,MAAA;IAAA,OAAAE,QAAA;EAAA;AAAA,EAGZ",
    "names": [
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const example = async () => {
        'use server';
        return 'foo bar';
      };
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=0.ts",
  ],
}
`;

exports[`ArrowFunctionExpression > server > should transform valid server functions with scope 1`] = `
{
  "code": "import { $$server as $$server_1 } from "my-example/server";
import { $$func as $$func_1 } from "my-example/runtime";
const outer = () => {
  const value = 'foo bar';
  const example = $$server_1(async () => {
    const source_1 = (await import("./example.ts?mode=server&my-example=1.ts")).default;
    return async (...rest_1) => {
      const [type_1, result_1] = await $$func_1(source_1, null)([value], ...rest_1);
      return result_1;
    };
  });
};",
  "entries": [
    "/path/to/example.ts?mode=server&my-example=1.ts",
  ],
  "files": Map {
    "/path/to/example.ts?mode=server&my-example=0.ts" => {
      "code": "export default (async ([value]) => {
  try {
    return [2, value];
  } catch (error_1) {
    return [4, error_1];
  }
  return [3];
});",
      "map": {
        "file": undefined,
        "mappings": "wBAEcA,KAAK,MACiB;EAAA;IAAA,WAEnBA,KAAK;EAAA,SAAAC,OAAA;IAAA,WAAAA,OAAA;EAAA;EAAA;AACd,CAAC",
        "names": [
          "value",
          "error_1",
        ],
        "sourceRoot": undefined,
        "sources": [
          "/path/to/example.ts",
        ],
        "sourcesContent": [
          null,
        ],
        "version": 3,
      },
    },
    "/path/to/example.ts?mode=server&my-example=1.ts" => {
      "code": "import { server as entry_1 } from "my-example/server";
import root_1 from "./example.ts?mode=server&my-example=0.ts";
export default entry_1("26ecc3a5-0-example", root_1);",
      "map": {
        "file": undefined,
        "mappings": "",
        "names": [],
        "sourceRoot": undefined,
        "sources": [],
        "sourcesContent": [],
        "version": 3,
      },
    },
  },
  "map": {
    "file": undefined,
    "mappings": ";;AACM,MAAMA,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,KAAK,GAAG,SAAS;EACvB,MAAMC,OAAO,GAAAC,UAAA;IAAA,MAAAC,QAAA,8DAAAC,OAAA;IAAA,iBAAAC,MAAA;MAAA,OAAAC,MAAA,EAAAC,QAAA,UAAAC,QAAA,CAAAL,QAAA,SADPH,KAAK,MAAAK,MAAA;MAAA,OAAAE,QAAA;IAAA;EAAA,EAIV;AACH,CAAC",
    "names": [
      "outer",
      "value",
      "example",
      "$$server_1",
      "source_1",
      "default",
      "rest_1",
      "type_1",
      "result_1",
      "$$func_1",
    ],
    "sourceRoot": undefined,
    "sources": [
      "/path/to/example.ts",
    ],
    "sourcesContent": [
      "
      const outer = () => {
        const value = 'foo bar';
        const example = async () => {
          'use server';
          return value;
        };
      }
      ",
    ],
    "version": 3,
  },
  "roots": [
    "/path/to/example.ts?mode=server&my-example=0.ts",
  ],
}
`;
